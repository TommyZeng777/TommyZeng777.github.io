(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{467:function(s,t,e){"use strict";e.r(t);var a=e(0),v=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"include-iostream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#include-iostream"}},[s._v("#")]),s._v(" "),t("code",[s._v("include<iostream>")])]),s._v(" "),t("p",[s._v("这是最常用的头文件，在C++中，"),t("code",[s._v("#include <iostream>")]),s._v(" 是一条预处理指令，用于包含标准库中的 "),t("code",[s._v("iostream")]),s._v(" 头文件。"),t("code",[s._v("iostream")]),s._v(" 是C++标准库的一部分，主要用于输入和输出操作。")]),s._v(" "),t("p",[s._v("以下是 "),t("code",[s._v("iostream")]),s._v(" 头文件的一些主要特点和组件：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("标准流对象")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("cin")]),s._v("：标准输入流，通常用于从键盘读取输入。")]),s._v(" "),t("li",[t("code",[s._v("cout")]),s._v("：标准输出流，用于向屏幕输出数据。")]),s._v(" "),t("li",[t("code",[s._v("cerr")]),s._v("：标准错误流，用于输出错误消息到屏幕，不经过缓冲区，直接输出。")]),s._v(" "),t("li",[t("code",[s._v("clog")]),s._v("：类似于 "),t("code",[s._v("cerr")]),s._v("，但输出通过缓冲区，用于输出日志信息。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("输入/输出操作符")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v(">>")]),s._v("：从 "),t("code",[s._v("cin")]),s._v(" 读取数据的提取操作符。")]),s._v(" "),t("li",[t("code",[s._v("<<")]),s._v("：向 "),t("code",[s._v("cout")]),s._v(", "),t("code",[s._v("cerr")]),s._v(", 或 "),t("code",[s._v("clog")]),s._v(" 写入数据的插入操作符。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("操纵符")]),s._v("：用于改变流的格式或行为的函数，如 "),t("code",[s._v("endl")]),s._v("（用于插入换行符并刷新输出缓冲区）、"),t("code",[s._v("std::setw")]),s._v("（设置字段宽度）、"),t("code",[s._v("std::setprecision")]),s._v("（设置浮点数的精度）等。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("流状态标志")]),s._v("：用于检查和设置流的状态（如错误状态）的功能。")])])]),s._v(" "),t("p",[t("code",[s._v("iostream")]),s._v(" 头文件非常重要，因为它提供了与用户交互的基本机制。例如，它使得从标准输入读取数据以及将数据输出到标准输出成为可能，这对于控制台程序来说非常关键。")]),s._v(" "),t("p",[s._v("一个基本的使用 "),t("code",[s._v("iostream")]),s._v(" 的示例：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Enter a number: "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    cin "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You entered "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" number "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("在这个程序中，我们使用 "),t("code",[s._v("cin")]),s._v(" 来从用户那里接收一个数字，并使用 "),t("code",[s._v("cout")]),s._v(" 来输出这个数字。"),t("code",[s._v("endl")]),s._v(" 用于在输出的末尾添加一个换行符，并刷新输出缓冲区，确保立即显示输出。")]),s._v(" "),t("h2",{attrs:{id:"include-vector-动态数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#include-vector-动态数组"}},[s._v("#")]),s._v(" "),t("code",[s._v("include<vector>动态数组")])]),s._v(" "),t("p",[s._v("在C++标准模板库（STL）中，"),t("code",[s._v("<vector>")]),s._v(" 头文件提供了 "),t("code",[s._v("std::vector")]),s._v(" 类，这是一个动态数组的实现。"),t("code",[s._v("std::vector")]),s._v(" 是一种序列容器，它可以存储具有相同类型的元素，并支持随机访问。")]),s._v(" "),t("p",[s._v("以下是 "),t("code",[s._v("std::vector")]),s._v(" 的一些主要特点：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("动态数组")]),s._v("："),t("code",[s._v("vector")]),s._v(" 的大小可以在运行时动态改变。它可以根据需要自动扩容和缩容。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("连续存储")]),s._v("："),t("code",[s._v("vector")]),s._v(" 中的元素是在连续的内存空间中存储的，这意味着它支持快速的随机访问。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("操作")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("push_back")]),s._v("：在 "),t("code",[s._v("vector")]),s._v(" 的末尾添加一个元素。")]),s._v(" "),t("li",[t("code",[s._v("pop_back")]),s._v("：移除 "),t("code",[s._v("vector")]),s._v(" 末尾的元素。")]),s._v(" "),t("li",[t("code",[s._v("insert")]),s._v("：在指定位置插入一个或多个元素。")]),s._v(" "),t("li",[t("code",[s._v("erase")]),s._v("：删除指定位置或范围内的元素。")]),s._v(" "),t("li",[t("code",[s._v("clear")]),s._v("：移除所有元素，使 "),t("code",[s._v("vector")]),s._v(" 为空。")]),s._v(" "),t("li",[t("code",[s._v("size")]),s._v("：返回 "),t("code",[s._v("vector")]),s._v(" 中的元素数量。")]),s._v(" "),t("li",[t("code",[s._v("resize")]),s._v("：改变 "),t("code",[s._v("vector")]),s._v(" 的大小。")]),s._v(" "),t("li",[t("code",[s._v("[]")]),s._v(" 运算符和 "),t("code",[s._v("at")]),s._v(" 方法：用于访问 "),t("code",[s._v("vector")]),s._v(" 中的元素。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("性能特点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("插入和删除操作在 "),t("code",[s._v("vector")]),s._v(" 的末尾是高效的，但在中间或开始位置可能需要移动元素，因此可能较慢。")]),s._v(" "),t("li",[s._v("提供高效的随机访问，即直接访问任何位置的元素。")]),s._v(" "),t("li",[s._v("当 "),t("code",[s._v("vector")]),s._v(" 的容量不足以容纳更多元素时，会自动重新分配更大的内存空间来扩容，这个操作的时间复杂度是线性的。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("用途")]),s._v("：适用于需要快速随机访问元素的场景，以及元素的添加和移除主要发生在序列的末尾。")])])]),s._v(" "),t("p",[s._v("在使用 "),t("code",[s._v("std::vector")]),s._v(" 时，你需要包含 "),t("code",[s._v("<vector>")]),s._v(" 头文件。由于 "),t("code",[s._v("vector")]),s._v(" 是模板类，你可以用它来存储任何类型的元素，例如 "),t("code",[s._v("std::vector<int>")]),s._v("、"),t("code",[s._v("std::vector<std::string>")]),s._v(" 等。")]),s._v(" "),t("p",[t("code",[s._v("std::vector")]),s._v(" 是最常用的 STL 容器之一，因为它提供了高度灵活的数据结构，同时具备数组的许多优点。在实际编程中，"),t("code",[s._v("vector")]),s._v(" 通常是默认的序列容器选择，除非有特定的理由要求使用其他类型的容器。")]),s._v(" "),t("h2",{attrs:{id:"include-deque-双端队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#include-deque-双端队列"}},[s._v("#")]),s._v(" "),t("code",[s._v("include<deque>")]),s._v("双端队列")]),s._v(" "),t("p",[t("code",[s._v("deque")]),s._v(' 在C++标准模板库（STL）中的全称是 "Double-Ended Queue"，即双端队列。它是一种允许在容器两端（即头部和尾部）高效插入和删除元素的序列容器。')]),s._v(" "),t("p",[t("code",[s._v("deque")]),s._v(" 的特点包括：")]),s._v(" "),t("ul",[t("li",[s._v("提供对头部和尾部元素的快速访问。")]),s._v(" "),t("li",[s._v("支持在头部和尾部高效地插入和删除元素。")]),s._v(" "),t("li",[s._v("支持随机访问，即可以通过索引直接访问任何元素。")]),s._v(" "),t("li",[s._v("内部实现通常比 "),t("code",[s._v("vector")]),s._v(" 复杂，因此当只需要在尾部添加或删除元素时，"),t("code",[s._v("vector")]),s._v(" 可能是更好的选择。")])]),s._v(" "),t("p",[s._v("由于 "),t("code",[s._v("deque")]),s._v(" 提供了在两端操作的灵活性，它在需要这种特性的场景下非常有用，如在实现某些算法或数据结构（例如队列和广度优先搜索算法）时。")]),s._v(" "),t("h2",{attrs:{id:"include-list-链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#include-list-链表"}},[s._v("#")]),s._v(" "),t("code",[s._v("include<list>")]),s._v("链表")]),s._v(" "),t("p",[s._v("在C++标准模板库（STL）中，"),t("code",[s._v("<list>")]),s._v(" 头文件提供了 "),t("code",[s._v("std::list")]),s._v(" 容器类，这是一个双向链表的实现。"),t("code",[s._v("std::list")]),s._v(" 允许快速的插入和删除操作，它主要用于那些需要频繁插入和删除元素，且不需要快速随机访问的场合。")]),s._v(" "),t("p",[s._v("以下是 "),t("code",[s._v("std::list")]),s._v(" 的一些主要特点：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("动态大小")]),s._v("：与数组不同，"),t("code",[s._v("list")]),s._v(" 的大小不是固定的，可以根据需要动态增长或缩减。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("非连续存储")]),s._v("："),t("code",[s._v("list")]),s._v(" 中的元素不是连续存储的，而是通过指针链接在一起。这意味着它允许常数时间内的元素插入和删除，但不支持快速随机访问。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("双向迭代")]),s._v("："),t("code",[s._v("list")]),s._v(" 提供双向迭代，你可以从头到尾或从尾到头遍历列表。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("操作")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("push_front")]),s._v(" 和 "),t("code",[s._v("push_back")]),s._v("：在列表的前端或后端添加一个元素。")]),s._v(" "),t("li",[t("code",[s._v("pop_front")]),s._v(" 和 "),t("code",[s._v("pop_back")]),s._v("：从列表的前端或后端移除一个元素。")]),s._v(" "),t("li",[t("code",[s._v("insert")]),s._v("：在指定位置插入一个或多个元素。")]),s._v(" "),t("li",[t("code",[s._v("erase")]),s._v("：删除指定位置或范围内的元素。")]),s._v(" "),t("li",[t("code",[s._v("clear")]),s._v("：移除所有元素，使列表为空。")]),s._v(" "),t("li",[t("code",[s._v("size")]),s._v("：返回列表中的元素数量。")]),s._v(" "),t("li",[t("code",[s._v("sort")]),s._v("：对列表元素进行排序。")]),s._v(" "),t("li",[t("code",[s._v("reverse")]),s._v("：反转列表中元素的顺序。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("性能特点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("插入和删除操作通常是常数时间复杂度，与列表的大小无关。")]),s._v(" "),t("li",[s._v("由于元素不是连续存储的，遍历 "),t("code",[s._v("list")]),s._v(" 比遍历 "),t("code",[s._v("vector")]),s._v(" 或数组要慢。")]),s._v(" "),t("li",[s._v("不支持通过索引直接访问元素。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("用途")]),s._v("：适用于元素经常被插入或删除，且不需要快速随机访问的场景。")])])]),s._v(" "),t("p",[s._v("在使用 "),t("code",[s._v("std::list")]),s._v(" 时，你需要包含 "),t("code",[s._v("<list>")]),s._v(" 头文件。由于 "),t("code",[s._v("list")]),s._v(" 是模板类，你可以用它来存储任何类型的元素，例如 "),t("code",[s._v("std::list<int>")]),s._v("、"),t("code",[s._v("std::list<std::string>")]),s._v(" 等。")]),s._v(" "),t("p",[s._v("在选择容器类型时，了解不同容器的特点和适用场景非常重要。对于需要快速随机访问的场合，"),t("code",[s._v("std::vector")]),s._v(" 或数组可能是更好的选择；而对于频繁的插入和删除操作，特别是在序列的两端，"),t("code",[s._v("std::list")]),s._v(" 或 "),t("code",[s._v("std::deque")]),s._v(" 更为合适。")]),s._v(" "),t("h2",{attrs:{id:"如何自己编写头文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何自己编写头文件"}},[s._v("#")]),s._v(" 如何自己编写头文件")]),s._v(" "),t("p",[s._v("头文件是可以自定义的，在C++中，头文件通常用于声明函数、类、模板和全局变量等，这样它们就可以在多个源文件中被重用。头文件有助于组织代码、提高可维护性，并促进模块化编程。")]),s._v(" "),t("p",[s._v("创建头文件的基本步骤如下：")]),s._v(" "),t("h3",{attrs:{id:"_1-创建头文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建头文件"}},[s._v("#")]),s._v(" 1. 创建头文件")]),s._v(" "),t("p",[s._v("创建一个扩展名为 "),t("code",[s._v(".h")]),s._v(" 或 "),t("code",[s._v(".hpp")]),s._v(" 的文件。例如，"),t("code",[s._v("my_functions.h")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"_2-写入代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-写入代码"}},[s._v("#")]),s._v(" 2. 写入代码")]),s._v(" "),t("p",[s._v("在头文件中，您可以包含如下内容：")]),s._v(" "),t("ul",[t("li",[s._v("函数原型（声明）")]),s._v(" "),t("li",[s._v("类定义")]),s._v(" "),t("li",[s._v("模板定义")]),s._v(" "),t("li",[s._v("全局变量的声明")]),s._v(" "),t("li",[s._v("宏定义")]),s._v(" "),t("li",[s._v("其他头文件的包含")])]),s._v(" "),t("p",[s._v("例如，一个简单的头文件可能包含一个函数的声明：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// my_functions.h")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifndef")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token expression"}},[s._v("MY_FUNCTIONS_H")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MY_FUNCTIONS_H")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PrintHelloWorld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// MY_FUNCTIONS_H")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"_3-使用头文件防护"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用头文件防护"}},[s._v("#")]),s._v(" 3. 使用头文件防护")]),s._v(" "),t("p",[s._v("为了防止头文件内容在同一个编译单元中被包含（"),t("code",[s._v("#include")]),s._v("）多次，通常使用预处理指令 "),t("code",[s._v("#ifndef")]),s._v("、"),t("code",[s._v("#define")]),s._v(" 和 "),t("code",[s._v("#endif")]),s._v(' 来创建所谓的 "include guards"。在上面的例子中，'),t("code",[s._v("MY_FUNCTIONS_H")]),s._v(" 就是一个守卫宏。")]),s._v(" "),t("h3",{attrs:{id:"_4-在源文件中包含头文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-在源文件中包含头文件"}},[s._v("#")]),s._v(" 4. 在源文件中包含头文件")]),s._v(" "),t("p",[s._v("在您的 "),t("code",[s._v(".cpp")]),s._v(" 源文件中，使用 "),t("code",[s._v('#include "my_functions.h"')]),s._v(" 来包含并使用头文件中声明的内容。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// main.cpp")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my_functions.h"')])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PrintHelloWorld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("cout "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, World!"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("PrintHelloWorld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("在上面的例子中，"),t("code",[s._v("PrintHelloWorld")]),s._v(" 函数在 "),t("code",[s._v("my_functions.h")]),s._v(" 中声明，在 "),t("code",[s._v("main.cpp")]),s._v(" 中定义，并在 "),t("code",[s._v("main")]),s._v(" 函数中调用。")]),s._v(" "),t("h3",{attrs:{id:"_5-编译"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-编译"}},[s._v("#")]),s._v(" 5. 编译")]),s._v(" "),t("p",[s._v("编译您的程序时，确保包含所有相关的 "),t("code",[s._v(".cpp")]),s._v(" 文件。头文件本身不会被直接编译，但它们在预处理阶段被包含在源文件中。")]),s._v(" "),t("p",[s._v("创建和使用自定义头文件是一种很好的实践，尤其是在较大的项目中，因为它有助于将声明和实现分离，使代码更清晰、更易于管理。")]),s._v(" "),t("h3",{attrs:{id:"_6-路径管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-路径管理"}},[s._v("#")]),s._v(" 6. 路径管理")]),s._v(" "),t("p",[s._v("前面没有提到路径如何管理，这也是确保头文件起作用很重要的一步。")]),s._v(" "),t("p",[s._v("在C++中，包含（或导入）头文件时，头文件的路径可以根据其相对于源文件的位置或是相对于编译器的搜索路径来指定。头文件的路径可以用双引号 "),t("code",[s._v('""')]),s._v(" 或尖括号 "),t("code",[s._v("<>")]),s._v(" 来指定，两者在搜索路径上有所不同。")]),s._v(" "),t("h4",{attrs:{id:"使用双引号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用双引号"}},[s._v("#")]),s._v(" 使用双引号 "),t("code",[s._v('""')])]),s._v(" "),t("p",[s._v("当使用双引号包含头文件时，如 "),t("code",[s._v('#include "my_header.h"')]),s._v("，编译器首先在源文件的当前目录中查找头文件。如果在当前目录中没有找到，它将按照编译器的搜索路径继续查找。这通常用于你自己编写的头文件或者特定于项目的头文件。")]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my_header.h"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查找当前目录下的my_header.h")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"使用尖括号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用尖括号"}},[s._v("#")]),s._v(" 使用尖括号 "),t("code",[s._v("<>")])]),s._v(" "),t("p",[s._v("当使用尖括号包含头文件时，如 "),t("code",[s._v("#include <iostream>")]),s._v("，编译器直接在其标准库目录和其他配置的库目录中搜索头文件。这主要用于标准库头文件或第三方库头文件。")]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查找标准库中的iostream")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h4",{attrs:{id:"指定头文件路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定头文件路径"}},[s._v("#")]),s._v(" 指定头文件路径")]),s._v(" "),t("p",[s._v("如果头文件不在当前目录或标准库路径中，你需要告诉编译器去哪里查找这些文件。这可以通过以下几种方式实现：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("使用相对路径")]),s._v("：\n如果头文件位于源文件所在目录的子目录中，可以使用相对路径。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"subdir/my_header.h"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在子目录中查找")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("使用绝对路径")]),s._v("：\n直接指定头文件的完整路径（不推荐，因为降低了代码的可移植性）。")]),s._v(" "),t("div",{staticClass:"language-cpp line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/path/to/my_header.h"')])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("编译器的 include 路径")]),s._v("：\n在编译时，可以通过编译器的命令行选项指定额外的 include 路径。例如，对于 GCC 和 Clang，可以使用 "),t("code",[s._v("-I")]),s._v(" 选项。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("g++ -I/path/to/headers my_program.cpp\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")]),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这告诉编译器在 "),t("code",[s._v("/path/to/headers")]),s._v(" 目录中也查找头文件。")])])]),s._v(" "),t("h4",{attrs:{id:"小提示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小提示"}},[s._v("#")]),s._v(" 小提示")]),s._v(" "),t("p",[s._v("保持项目的组织结构清晰，将头文件放在合适的目录中，可以避免很多关于路径的问题。对于较大的项目，通常有一个专门的目录（如 "),t("code",[s._v("include")]),s._v("）来存放所有头文件。")])])}),[],!1,null,null,null);t.default=v.exports}}]);